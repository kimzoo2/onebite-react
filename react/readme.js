// 리액트의 특징
// 1. 컴포넌트(화면을 구성하는 요소) 기반으로 ui 표현한다.
// 2. 화면 업데이트(= 사용자의 행동에 따라서 웹 페이지가 스스로 모습을 바꿔 상호작용하는 것) 구현 쉽다?
// - 선언형 프로그래밍이기 때문에 화면 업데이트가 쉽다. 이루고자 하는 목적만 명시하는 방법과 같다.
// - js는 명령형 프로그래밍 (모든 과정을 다 설명해야 하기 때문에 길고 복잡해질 수 있음)
// state를 저장할 수 있는데 state를 변경했을 때 동적으로 컴포넌트만 렌더링 가능
// 3. 화면 업데이트가 빠르게 처리된다.
// critical rendering path 개념 이해하기
// - html, css를 dom(document object model)과 cssom이라는 객체로 변환
// - dom과 cssom을 합쳐서 render tree(=웹페이지의 설계도)를 만듦
// - layout(요소들을 배치하는 작업)을 진행함
// - painting(요소를 실제로 화면에 그리는 작업)을 진행
// dom을 수정하면 화면 업데이트가 발생한다!
// 근데 layout(reflow)과 painting(repainting)이 오래 걸림 -> 한 번에 모았다가 수정하면 성능 개선 가능
// 이런 걸 react가 자동으로 처리해줌. 업데이트 동시에 실행해도 빠른 화면 업데이트 가능
// 어떻게? virtual dom을 이용해서

// react app은 어떻게 구동되는걸까?
// 비트를 통해 생성한 리액트 앱은 웹서버가 내장되어 있음
// npm run dev는 그 웹서버를 가동하는 명령어였음
